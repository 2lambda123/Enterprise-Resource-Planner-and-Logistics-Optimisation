import { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';
import { ChangeDetectorRef, ViewChild, Component, OnInit, TemplateRef, OnDestroy, HostListener } from '@angular/core';
import { Subscription, combineLatest } from 'rxjs';
import { SidebarService, ISidebar } from '../sidebar/sidebar.service';
import { Router } from '@angular/router';
import { LangService, Language } from 'src/app/shared/lang.service';
import { AuthService } from 'src/app/shared/auth.service';
import { environment } from 'src/environments/environment';
import { FormControl, FormBuilder, FormGroup, Validators } from '@angular/forms';


// Generated by https://quicktype.io

export interface IDriver {
  emp_Id:         number;
  emp_First_Name: string;
  emp_Last_Name:  string;
  emp_Email:      string;
  emp_Password:   string;
  emp_Role:       string;
  emp_Branch_Id:  string;
}

// Generated by https://quicktype.io

export interface IRoutes {
  route_Id:             number;
  route_ETA_In_Seconds: string;
  route_Driver_Id:      number;
  route_Date:           string;
}

// Generated by https://quicktype.io

export interface ISubmitRoutes {
  route_Id:        number;
  route_Driver_Id: number;
}

// Generated by https://quicktype.io

export interface IDelayedOrders {
  order_Ids:          number[];
  route_Delay_Reason: string;
}

export interface IDelayedOrdersPost {
  order_Ids:          number[];
  custom_Message: string;
}


@Component({
  selector: 'app-topnav',
  templateUrl: './topnav.component.html'
})
export class TopnavComponent implements OnInit, OnDestroy {
 //assign driver variables

 assignDrivermodalRef: BsModalRef;
 assignDriversubscriptions: Subscription[] = [];
 assignDrivermessages: string[] = [];

  //delayed order variables

  delayedOrdermodalRef: BsModalRef;
  delayedOrdersubscriptions: Subscription[] = [];
  delayedOrdermessages: string[] = [];

 //manager CONSULATNAT notification counter
 manNotifyCount: number = 2;
 conNotifyCount: number = 0;
 //assign driver front end variables

 productcount: number = 0;
 drivercount: number = 0;   //driver count from service

// driver data from service
 unassroutedata;
 driverdata;

 //delyaed order data from srevuce
 delayedorderdata;

 unassrouteindex;

 routetemp;
 drivertemp;


 selectDriverAllState = '';//is driver checked?



 routeindexcount: number = 0;
 productindex = [];
 totalProductItem = 0;
 productitemsPerPage = 10;
 productPage = 1;
 assigndriverform: FormGroup = null;

 delayedordersform = this.fb.group({
  txtDelayedMsg : ['', Validators.required]
})

 driverdisplayMode = 'list';

 
 public selectedDrivers : IDriver[] =[];


 
 searchproduct = '';
 orderproductBy = '';


 //stored data in array from service
 routes : IRoutes[] = [];

 drivers : IDriver[] = [];

 
  getdelayedorders: IDelayedOrders= {
    order_Ids: [],
    route_Delay_Reason: ''
  };

  delayedorderIds: number[] = [];
  
 postdelayedordersmsg : IDelayedOrdersPost= {
  order_Ids: [],
  custom_Message: ''
};;
 
 //create json object here

  submitroutes : ISubmitRoutes[] = [] ;


 
  sidebar: ISidebar;
  subscription: Subscription;
  displayName  = '';
  languages: Language[];
  currentLanguage: string;
  isSingleLang;
  isFullScreen = false;
  isDarkModeActive = false;
  searchKey = '';

  

  constructor(private fb: FormBuilder, private modalService: BsModalService, private changeDetection: ChangeDetectorRef, private sidebarService: SidebarService, private authService: AuthService, private router: Router, private langService: LangService) {
    this.languages = this.langService.supportedLanguages;
    this.currentLanguage = this.langService.languageShorthand;
    this.isSingleLang = this.langService.isSingleLang;
    this.isDarkModeActive = this.getColor().indexOf('dark') > -1 ? true : false;
    this.displayName = this.authService.user;
  
    this.loadDelayedOrder();
    console.log('man get orders', this.delayedorderIds)
  }


  getDelayedOrders()
  {
    return this.authService.GetDelayedOrders().subscribe()
  }


  employeeRole()
  {
    return localStorage.getItem('emp_Role');
  }

  
  delayedorderModal(template: TemplateRef<any>) {
    this.delayedOrdermessages = [];

    const _combine = combineLatest(
      this.modalService.onShow,
      this.modalService.onShown,
      this.modalService.onHide,
      this.modalService.onHidden
    ).subscribe(() => this.changeDetection.markForCheck());

    this.delayedOrdersubscriptions.push(
      this.modalService.onShow.subscribe((reason: string) => {
        this.delayedOrdermessages.push(`onShow event has been fired`);
      })
    );
    this.delayedOrdersubscriptions.push(
      this.modalService.onShown.subscribe((reason: string) => {
        this.delayedOrdermessages.push(`onShown event has been fired`);
      })
    );
    this.delayedOrdersubscriptions.push(
      this.modalService.onHide.subscribe((reason: string) => {
        const _reason = reason ? `, dismissed by ${reason}` : '';
        this.delayedOrdermessages.push(`onHide event has been fired${_reason}`);
      })
    );
    this.delayedOrdersubscriptions.push(
      this.modalService.onHidden.subscribe((reason: string) => {
        const _reason = reason ? `, dismissed by ${reason}` : '';
        this.delayedOrdermessages.push(`onHidden event has been fired${_reason}`);
        this.delayedOrderunsubscribe();
      })
    );

    this.delayedOrdersubscriptions.push(_combine);

    this.delayedOrdermodalRef = this.modalService.show(template);
  }
  
  
  assigndriverModal(template: TemplateRef<any>) {
    this.assignDrivermessages = [];
    this.loadDriverData(this.productitemsPerPage, this.productPage, this.searchproduct, this.orderproductBy);
  
    const _combine = combineLatest(
      this.modalService.onShow,
      this.modalService.onShown,
      this.modalService.onHide,
      this.modalService.onHidden
    ).subscribe(() => this.changeDetection.markForCheck());

    this.assignDriversubscriptions.push(
      this.modalService.onShow.subscribe((reason: string) => {
        this.assignDrivermessages.push(`onShow event has been fired`);
      })
    );
    this.assignDriversubscriptions.push(
      this.modalService.onShown.subscribe((reason: string) => {
        this.assignDrivermessages.push(`onShown event has been fired`);
      })
    );
    this.assignDriversubscriptions.push(
      this.modalService.onHide.subscribe((reason: string) => {
        const _reason = reason ? `, dismissed by ${reason}` : '';
        this.assignDrivermessages.push(`onHide event has been fired${_reason}`);
      })
    );
    this.assignDriversubscriptions.push(
      this.modalService.onHidden.subscribe((reason: string) => {
        const _reason = reason ? `, dismissed by ${reason}` : '';
        this.assignDrivermessages.push(`onHidden event has been fired${_reason}`);
        this.assignDriverunsubscribe();
      })
    );

    this.assignDriversubscriptions.push(_combine);

    this.assignDrivermodalRef = this.modalService.show(template);
  }


   //assign driver function
   optimise()
   {
     
     console.log(this.submitroutes)
     this.authService.optimise().subscribe(null,null,()=> {
      window.location.reload();
      });
   }

  //assign driver function
  assignDrivers(): void
  {
    
    console.log(this.submitroutes)
    this.authService.assignDriver(this.submitroutes).subscribe(null,null,()=> {
      window.location.reload();
      });
  }


  delayClientsOrder(): void
  {
    console.log('post get orders', this.getdelayedorders)
    this.postdelayedordersmsg.order_Ids = this.getdelayedorders.order_Ids
    this.postdelayedordersmsg.custom_Message = this.delayedordersform.value.txtDelayedMsg
    this.authService.DelayedOrdersMsg(this.postdelayedordersmsg).subscribe(null,null,()=> {
      window.location.reload();
      });
  }

  loadDriverData(pageSize: number = 10, currentPage: number = 1, search: string = '', orderBy: string = '') {
    this.productitemsPerPage = pageSize;
    this.productPage = currentPage;
    this.searchproduct = search;
    this.orderproductBy = orderBy;
    this.drivers=[];


    this.authService.GetAllAvailableDrivers().subscribe(data=> {
      console.log(data)

      for(let key in data)
      {
        if(data.hasOwnProperty(key))
        {
          this.drivers.push(data[key]);
          this.drivercount++;
          console.log(data[key])
        }
      }
      
     
      this.driverdata = this.drivers.slice(0,this.drivers.length).map(({emp_Id, emp_First_Name, emp_Last_Name}) => ({emp_Id, emp_First_Name, emp_Last_Name}));
      

      this.drivertemp = [...this.driverdata];
      console.log(this.driverdata)
      console.log(this.driverdata.emp_Id)
      console.log(this.drivertemp)
      console.log(this.drivers)
      console.log(this.drivercount)
    });

    this.authService.GetAllUnassignedRoutes().subscribe(data=> {
      console.log(data)
      this.unassroutedata = data

      for(let key in data)
      {
        if(data.hasOwnProperty(key))
        {
          this.routes.push(data[key]);
          this.productcount++;
          console.log(data[key])
        }
      }
      
     
      this.unassrouteindex = this.routes.slice(0,this.routes.length).map(({route_Id}) => ({route_Id}));
      

      this.routetemp = [...this.unassroutedata];
      console.log(this.unassroutedata)
      console.log(this.unassroutedata.route_Id)
      console.log(this.routetemp)
      console.log(this.routes)
      console.log(this.productcount)
    });
    
  }




delayedordercount = 0;
  loadDelayedOrder() 
  {
    this.authService.GetDelayedOrders().subscribe(data=> {
      console.log(data.order_Ids)

           this.getdelayedorders.order_Ids = data.order_Ids;
          this.getdelayedorders.route_Delay_Reason = data.route_Delay_Reason;
    });
    console.log('man get orders', this.getdelayedorders)
  }



  assignDriverunsubscribe() {
    this.assignDriversubscriptions.forEach((subscription: Subscription) => {
      subscription.unsubscribe();
    });
    this.assignDriversubscriptions = [];
  }

  delayedOrderunsubscribe() {
    this.delayedOrdersubscriptions.forEach((subscription: Subscription) => {
      subscription.unsubscribe();
    });
    this.delayedOrdersubscriptions = [];
  }

  
  isSelectedDriver(p: IDriver) {
    return this.drivers.findIndex(d => d.emp_Id === p.emp_Id) > -1;
  }

  
  dcount: number = 1;
  elementnumber: number;

  onSelectDriver(item: IDriver) {

    if (this.isSelectedDriver(item)) {
      console.log(item.emp_Id);
      console.log('product id ' + item.emp_Id);
      console.log('products packed : ' + this.submitroutes.length);

        this.submitroutes.push( {
          route_Id: +(document.getElementById('productQty' + this.drivers.findIndex(d => d.emp_Id === item.emp_Id)) as HTMLInputElement).value,
          route_Driver_Id: item.emp_Id
         }
        );

        console.log('selected Products packed : ' , this.submitroutes);
      
        this.dcount++;

       this.routeindexcount++;
      console.log('routes selected count : ' + this.routeindexcount);
    } else { 

      //logic of autoselect goes here
    
      
    }
    this.setDriverSelectAllState();
  }

  
  setDriverSelectAllState() {
    if (this.selectedDrivers.length === this.drivers.length) {
      this.selectDriverAllState = 'checked';
    } else if (this.routes.length !== 0) {
      this.selectDriverAllState = 'indeterminate';
    } else {
      this.selectDriverAllState = '';
    }
  }

  pageProductChanged(event: any): void {
    //this.loadProductData(this.productitemsPerPage, event.page, this.searchproduct, this.orderproductBy);
  }



  //navbar functions


  onDarkModeChange(event) {
    let color = this.getColor();
    if (color.indexOf('dark') > -1) {
      color = color.replace('dark', 'light');
    } else if (color.indexOf('light') > -1) {
      color = color.replace('light', 'dark');
    }
    localStorage.setItem(environment.themeColorStorageKey, color);
    setTimeout(() => {
      window.location.reload();
    }, 200);
  }

  getColor() {
    return localStorage.getItem(environment.themeColorStorageKey)
      ? localStorage.getItem(environment.themeColorStorageKey)
      : environment.defaultColor;
  }

  fullScreenClick() {
    this.isFullScreen = !this.isFullScreen;
    if (this.isFullScreen) {
      document.documentElement.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  }

  onLanguageChange(lang) {
    this.langService.language = lang.code;
    this.currentLanguage = this.langService.languageShorthand;
  }

  ngOnInit() {
    console.log(this.authService.user)
    if (this.authService.user) {
      this.displayName = this.authService.user;
      console.log(this.displayName)
    }
    this.subscription = this.sidebarService.getSidebar().subscribe(
      res => {
        this.sidebar = res;
      },
      err => {
        console.error(`An error occurred: ${err.message}`);
      }
    );
  }

  ngOnDestroy(): void {
    this.subscription.unsubscribe();
  }

  menuButtonClick = (e: { stopPropagation: () => void; }, menuClickCount: number, containerClassnames: string) => {
    if (e) { e.stopPropagation(); }

    setTimeout(() => {
      const event = document.createEvent('HTMLEvents');
      event.initEvent('resize', false, false);
      window.dispatchEvent(event);
    }, 350);

    this.sidebarService.setContainerClassnames(
      ++menuClickCount,
      containerClassnames,
      this.sidebar.selectedMenuHasSubItems
    );
  }

  mobileMenuButtonClick = (event: { stopPropagation: () => void; }, containerClassnames: string) => {
    if (event) { event.stopPropagation(); }
    this.sidebarService.clickOnMobileMenu(containerClassnames);
  }

  onSignOut() {
    this.authService.logout(localStorage.getItem('token'));
    this.router.navigate(['/user']);
  }

  searchKeyUp(event: KeyboardEvent) {
    if (event.key === 'Enter') {
      this.search();
    } else if (event.key === 'Escape') {
      const input = document.querySelector('.mobile-view');
      if (input && input.classList) { input.classList.remove('mobile-view'); }
      this.searchKey = '';
    }
  }

  searchAreaClick(event) {
    event.stopPropagation();
  }
  searchClick(event) {
    if (window.innerWidth < environment.menuHiddenBreakpoint) {
      let elem = event.target;
      if (!event.target.classList.contains('search')) {
        if (event.target.parentElement.classList.contains('search')) {
          elem = event.target.parentElement;
        } else if (
          event.target.parentElement.parentElement.classList.contains('search')
        ) {
          elem = event.target.parentElement.parentElement;
        }
      }

      if (elem.classList.contains('mobile-view')) {
        this.search();
        elem.classList.remove('mobile-view');
      } else {
        elem.classList.add('mobile-view');
      }
    } else {
      this.search();
    }
    event.stopPropagation();
  }

  search() {
    if (this.searchKey && this.searchKey.length > 1) {
      this.router.navigate(['/app/pages/miscellaneous/search'], { queryParams: { key: this.searchKey.toLowerCase().trim() } });
      this.searchKey = '';
    }
  }

  @HostListener('document:click', ['$event'])
  handleDocumentClick(event) {
    const input = document.querySelector('.mobile-view');
    if (input && input.classList) { input.classList.remove('mobile-view'); }
    this.searchKey = '';
  }

  
  get myForm() {
    return this.delayedordersform.controls;
  }


}
