import { Injectable } from '@angular/core';
import { environment } from '../../environments/environment';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, of, Subject, Observer  } from 'rxjs';
import { stringify } from 'querystring';
import { catchError, map, tap } from 'rxjs/operators';

// Init GeoFireX for distance calculations
// Generated by https://quicktype.io

export interface iLiveOrderLocation {
  driver_Id: number;
  longitude: number;
  latitude:  number;
}

export interface ISignInCredentials {
  email: string;
  password: string;
}

export interface ICreateCredentials {
  email: string;
  password: string;
  displayName: string;
}

export interface IPasswordReset {
  code: string;
  newPassword: string;
}

@Injectable({
  providedIn: 'root'
})


export class AuthService {

  private loginPath = environment.apiUrl + 'Authenticate/?api-version=1'
  private logOrderPath = environment.apiUrl + 'SubmitOrder'
  private registerEmployeePath = environment.apiUrl + 'RegisterNewEmployee'
  private registerDriverPath = environment.apiUrl + 'RegisterNewDriver'
  private createClientPath = environment.apiUrl + 'AddNewClient'
  private viewClientPath = environment.apiUrl + 'GetAllClients'
  private viewOrderPath = environment.apiUrl + 'getAllOrders'
  private viewProductsPath = environment.apiUrl + 'GetAllStockItemsConsultant'
  private viewAvailRoutesPath = environment.apiUrl + 'GetAllUnassignedRoutes'
  private viewAvailDriversPath = environment.apiUrl + 'GetAllAvailableDrivers'
  private assDriverPath = environment.apiUrl + 'AssignDrivers'
  private getBranchPath = environment.apiUrl + 'GetBranch'
  private getManagerRoutesPath = environment.apiUrl +'GetAllActiveRoutes'
  private getOptimisationPath = environment.apiUrl + 'PlanRoutes'
  private getDelayedOrdersPath = environment.apiUrl + 'GetDelays'
  private postDelayedOrdersMsgPath = environment.apiUrl + 'PostCustomMessage'
  private getOrderInvoicePath = environment.apiUrl + 'GetInvoiceAsPDF'
  private postCancelOrderPath = environment.apiUrl + 'CancelOrder'
  private liveOrderLocationPath = environment.apiUrl + 'GetOrderLocation'
  private cancelOrderPath = environment.apiUrl + 'CancelOrder'
  private deleteRoutesPath = environment.apiUrl + 'DeleteRoutes'

  uFname : string
  log;

  constructor(private http: HttpClient) 
  {
    this.getUserRole();
  }


  login(data): Observable<any>
  {
    
    console.log(data)

    return this.http.post(this.loginPath, data)
  }

  logout(token)
  {
    if(this.getToken() == token)
    {
      localStorage.clear();
    }
  }

  logOrder(data): Observable<any>
  {
    
    console.log(data)

    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    console.log(headers.getAll)
    console.log(this.getToken())
    console.log(this.http.post(this.logOrderPath, data, {headers}))
    console.log(data)
    return this.http.post(this.logOrderPath, data, {headers})
  }

  createClient(data): Observable<any>
  {
    
    console.log(data)

    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.post(this.createClientPath, data, {headers})
  }

  registerEmployee(data): Observable<any>
  {
    
    console.log(data)

    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.post(this.registerEmployeePath, data, {headers})
  }

  registerDriver(data): Observable<any>
  {
    
    console.log(data)

    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.post(this.registerDriverPath, data, {headers})
  }
  
  
  optimise(): Observable<any>
  {

    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.post(this.getOptimisationPath,'', {headers})
  }

  assignDriver(data): Observable<any>
  {
    
    console.log(data)

    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.post(this.assDriverPath, data, {headers})
  }

  postDeleteRoutes(routes): Observable<any>
  {
    console.log(routes)

    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.post(this.deleteRoutesPath, routes, {headers})
  }
  
  postcancelOrder(canceledOrder): Observable<any>
  {
    console.log(canceledOrder)

    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.post(this.cancelOrderPath, canceledOrder, {headers})
  }

  DelayedOrdersMsg(data): Observable<any>
  {
    
    console.log(data)

    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.post(this.postDelayedOrdersMsgPath, data, {headers})
  }
  
  ManagerRoutes(): Observable<any>
  {
    console.log(this.getManagerRoutesPath)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.get(this.getManagerRoutesPath,{headers})
  }

  
  unnassignedManagerRoutes(): Observable<any>
  {
    console.log(this.getManagerRoutesPath)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.get(this.getManagerRoutesPath,{headers})
  }

  viewClients(): Observable<any>
  {
    console.log(this.viewClientPath)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.get(this.viewClientPath,{headers})
  }

  //get delayyed orders
  GetDelayedOrders(): Observable<any>
  { 
    console.log(this.getDelayedOrdersPath)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.get(this.getDelayedOrdersPath,{headers})
  }
  //assign driver functions

  GetAllUnassignedRoutes(): Observable<any>
  { 
    console.log(this.viewAvailRoutesPath)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.get(this.viewAvailRoutesPath,{headers})
  }

  GetAllAvailableDrivers(): Observable<any>
  { 
    console.log(this.viewAvailDriversPath)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.get(this.viewAvailDriversPath,{headers})
  }

  viewProducts(): Observable<any>
  {
    console.log(this.viewProductsPath)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    console.log( "products =  " + this.http.get(this.viewProductsPath,{headers}))
    return this.http.get(this.viewProductsPath,{headers})
  }

  getOrderInvoice(iorder:number)
  {
    console.log(this.getOrderInvoicePath)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.get(this.getOrderInvoicePath + '/' + iorder,{headers: headers, responseType: 'blob'});

  }

  
  getliveorderdriverlocation(orderId: number): Observable<any>
  {
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.get(this.liveOrderLocationPath + '/' + orderId,{headers})
  }
  
  postCancelOrder(order)
  {
    console.log(this.postCancelOrderPath)
    console.log(order)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.post(this.postCancelOrderPath,order,{headers});

  }

  viewOrders(): Observable<any>
  {
    console.log(this.viewOrderPath)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    console.log(headers.getAll)
    console.log(this.getToken())
    return this.http.get(this.viewOrderPath,{headers})
  }

  getBranch(): Observable<any>
  {
    
    console.log(this.viewProductsPath)
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    console.log( "products =  " + this.http.get(this.getBranchPath,{headers}))
    return this.http.get(this.getBranchPath,{headers})
  }
  saveToken(token)
  {
    localStorage.setItem('token',token)
    console.log(token)
  }

  getToken()
  {
    return localStorage.getItem('token')
  }

  saveUser(uFname,uLname, uId)
  {
    localStorage.setItem('emp_First_Name',uFname)
    localStorage.setItem('emp_Last_Name',uLname)
    localStorage.setItem('emp_Id', uId)
    console.log(uFname + " " + uLname + " " + uId)
  }
  getUser()
  {
    return localStorage.getItem('emp_First_Name')
  }

  saveUserRole(uRole)
  {
    localStorage.setItem('emp_Role', uRole)
    console.log( "User role =  " + localStorage.getItem('emp_Role'))
  }

  getUserRole()
  {
    console.log( "User role =  " + localStorage.getItem('emp_Role'))
    return localStorage.getItem('emp_Role')
  }

  get user()
  {
    this.uFname = localStorage.getItem('emp_First_Name') + " " + localStorage.getItem('emp_Last_Name')
    console.log(this.uFname)
    return this.uFname
  }


}


/*

  private subject: Subject<MessageEvent>;

  public connect(url): Subject<MessageEvent> {
    if (!this.subject) {
      this.subject = this.create(url);
      console.log("Successfully connected: " + url);
    }
    return this.subject;
  }

  private create(url): Subject<MessageEvent> {
    let ws = new WebSocket(url);

    let observable = Observable.create((obs: Observer<MessageEvent>) => {
      ws.onmessage = obs.next.bind(obs);
      ws.onerror = obs.error.bind(obs);
      ws.onclose = obs.complete.bind(obs);
      return ws.close.bind(ws);
    });
    let observer = {
      next: (data: Object) => {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify(data));
        }
      }
    };
    return Subject.create(observer, observable);
  }


  getliveorderdriverlocation(orderId: number): Observable<any>
  {
    let headers = new HttpHeaders();
    headers = headers.set('Authorization', `Bearer ${this.getToken()}`)
    return this.http.get(this.liveOrderLocationPath + '/' + orderId,{headers})
  }
  getlive(orderId:number): Observable<any>
  {
    let promise = new Promise((resolve, reject) => {

      let headers = new HttpHeaders();
      headers = headers.set('Authorization', `Bearer ${this.getToken()}`)

      this.http.get(this.liveOrderLocationPath + '/' + orderId,{headers})
        .toPromise()
        .then(
          res => { // Success
            console.log(res);
            resolve();
          }
        );
    });
    return promise;
  }*/
