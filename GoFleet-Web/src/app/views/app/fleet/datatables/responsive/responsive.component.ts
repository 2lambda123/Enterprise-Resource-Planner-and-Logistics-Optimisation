import { AuthService } from './../../../../../shared/auth.service';
import { Component, ViewEncapsulation, ViewChild } from '@angular/core';
import { ColumnMode, DatatableComponent, SelectionType } from '@swimlane/ngx-datatable';
import { stringify } from 'querystring';

@Component({
  selector: 'app-responsive',
  templateUrl: './responsive.component.html'
})


export class ResponsiveComponent{
  @ViewChild('myTable') table: any;

// Generated by https://quicktype.io
  orders : IOrders[] = [];
  data: string;
  count: number = 0;
  expanded: any = {};
  timeout: any;  
  rows;
  temp;
  itemsPerPage = 10;
  ColumnMode = ColumnMode;
  columns = [
    { prop: 'order_Id', name: 'orderID' }
   
  ];
  
  constructor(private authService: AuthService) {
    this.authService.viewOrders().subscribe(data=> {
      console.log(data)
      this.data = data

      for(let key in data)
      {
        if(data.hasOwnProperty(key))
        {
          this.orders.push(data[key]);
          this.count++;
          console.log(data[key])
        }
      }
      this.rows = this.orders.slice(0,this.orders.length).map(({order_Id, order_Deliver_By_Date}) => ({order_Id, order_Deliver_By_Date}));
      this.temp = [...this.rows];
      console.log(this.rows)
      console.log(this.rows.order_Id)
      console.log(this.temp)
      console.log(this.orders)
      console.log(this.count)
    })
    
  } 
  
  ngOnInit(): void 
  {
  
  }

  onPage(event) {
  }

  toggleExpandRow(row) {
    this.table.rowDetail.toggleExpandRow(row);
  }

  onDetailToggle(event) {
  }

  updateFilter(event) {
    const val = event.target.value.toLowerCase().trim();
    const count = this.orders.length;
    const keys = Object.keys(this.temp[0]);
    const temp = this.temp.filter(item => {
      for (let i = 0; i < count; i++) {
        if ((item[keys[i]] && item[keys[i]].toString().toLowerCase().indexOf(val) !== -1) || !val) {
          return true;
        }
      }
    });
    this.rows = temp;
    this.table.offset = 0;
  }
}


export interface IOrders extends Array<IOrders>
{
  order_Id:              number;
  order_Location_Id:     number;
  location:              null;
  order_Consultant_Id:   number;
  consultant:            null;
  order_Client_Id:       number;
  client:                null;
  order_Date_Placed:     string;
  order_Deliver_By_Date: string;
 
}

export interface IOrder extends Array<IOrders>{}