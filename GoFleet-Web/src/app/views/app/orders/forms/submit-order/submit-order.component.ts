import { Component, TemplateRef, OnInit, ViewChild } from '@angular/core';
import { AuthService } from 'src/app/shared/auth.service';
import { Router } from '@angular/router';
import { FormControl, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ColumnMode, DatatableComponent, SelectionType } from '@swimlane/ngx-datatable';
import { GooglePlaceModule, GooglePlaceDirective } from "ngx-google-places-autocomplete"; 
import { Address } from 'ngx-google-places-autocomplete/objects/address';
import {Location, Appearance, GermanAddress} from '@angular-material-extensions/google-maps-autocomplete';
import { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';
import PlaceResult = google.maps.places.PlaceResult;
import * as moment from 'moment';

// Generated by https://quicktype.io

export interface IAddClient 
{
  client_First_Name:          string;
  client_Last_Name:           string;
  client_Id_Number:           string;
  client_Business_Name:       string;
  client_Business_Reg_Number: string;
  client_Contact_Number:      string;
  client_Email:               string;
}


//submit to api data structure

export interface OrderDetails {
  location:              OrderLocation;
  order_Consultant_Id:   number;
  order_Client_Id:       number;
  order_Deliver_By_Date: string;
  order_Date_Placed:     string;
  order_Items:           OrderItem[];
}

export interface OrderLocation {
  location_Street:    string;
  location_Suburb:    string;
  location_City:      string;
  location_Zip_Code:  string;
  location_Longitude: number;
  location_Latitude:  number;
  location_Places_Id: string;
}

export interface OrderItem
{
  stockitem_Id:     number;
  quantity_Ordered: number;
}

export interface iOrderItems 
{
  "order_items" : OrderItem[];
}


//front end data structure


export interface ILocation extends Array<ILocation>
{
  order_Consultant_Id:   number;
  order_Client_Id:       number;
  order_Deliver_By_Date: string;
  order_Items:           IOrderItem[];
}

export interface IOrderItem {
  stockItem_Id:        number;
  stockItem_Branch_Id: number;
  stockItem_Name:      string;
  stockItem_Volume:    number;
  stockItem_Quantity:  number;
}


export interface iClient {
  client_Id:                  number;
  order_Client_Email:         string;
  client_First_Name:          string;
  client_Last_Name:           string;
  client_Business_Name:       string;
  client_Id_Number:           string;
  client_Business_Reg_Number: string;
}

@Component({
  selector: 'app-submit-order',
  templateUrl: './submit-order.component.html'
})


export class SubmitOrderComponent implements OnInit {

  

  //submit order data
  modalRef: BsModalRef;

  config = {
    backdrop: true,
    ignoreBackdropClick: true,
    class: 'modal-right'
  };



  public newClient : IAddClient = 
  {
    client_First_Name:          '',
    client_Last_Name:           '',
    client_Id_Number:           '',
    client_Business_Name:       '',
    client_Business_Reg_Number: '',
    client_Contact_Number:      '',
    client_Email:               ''
  };


  public orderDetails : OrderDetails = 
  {
    location: {
      location_Street: "",
      location_Suburb: "",
      location_City: "",
      location_Zip_Code: "",
      location_Longitude: 0,
      location_Latitude: 0,
      location_Places_Id: ""},           
    order_Consultant_Id:   0,
    order_Client_Id:      0,
    order_Deliver_By_Date: '',
    order_Date_Placed:    '',
    order_Items:  []
  };
  public orderLocation : OrderLocation = {
    location_Street: "",
    location_Suburb: "",
    location_City: "",
    location_Zip_Code: "",
    location_Longitude: 0,
    location_Latitude: 0,
    location_Places_Id: ""
  };

  public selectedProducts = [];


  //googlle
  public appearance = Appearance;
  public zoom: number;
  public latitude: number;
  public longitude: number;
  public selectedAddress: PlaceResult;
 
  clientindex: number = 0;

  productindex = [];
  productQty = [];
  selectedproductindex: number = 0;

  location: ILocation[] = [];
  locString: String = 'location';
  clientdisplayMode = 'list';
  productdisplayMode = 'list';
  
  selectClientAllState = '';
  selectProductAllState = '';
  clientPage = 1;
  productPage = 1;
  searchclient = '';
  searchproduct = '';
  orderclientBy = '';
  orderproductBy = '';
  isLoading: boolean;
  endOfTheClientList = false;
  endOfTheProductList = false;
  totalClientItem = 0;
  totalProductItem = 0;
  totalClientPage = 0;
  totalProductPage = 0;

 
  @ViewChild('template', { static: true }) template: TemplateRef<any>;
   
  @ViewChild("placesRef") placesRef : GooglePlaceDirective;
  @ViewChild('myTable') table: any; 
  //Local Variable defined 
  formattedaddress=" "; 
  options = { 
    componentRestrictions:{ 
      country:["ZA"] 
    } 
  };

  public AddressChange(address: any) { 
  //setting address from API to local variable 
   this.formattedaddress=address.formatted_address 
   console.log(this.formattedaddress)
} 
// Generated by https://quicktype.io


  
  client : iClient[] = [];
  selectedClient: iClient[] = [];
  products : IOrderItem[] = [];

  clientdata: string;
  productdata: string;
  clientcount: number = 0;
  productcount: number = 0;
  productindexcount: number = 0;
  locationcount: number = 0;
  expanded: any = {};
  timeout: any;  

  clientrows; 

  clienttemp;
  clientitemsPerPage = 10;
  clientColumnMode = ColumnMode;
  clientcolumns = [
    { prop: 'client_First_Name', name: 'Client First Name' },
    { prop: 'client_Business_Name', name: 'Client Business Name' },
    { prop: 'client_Id', name: 'Client Id' },
    { prop: 'client_Last_Name', name: 'Client Last Name' },
  ];

  productrows;
  producttemp;
  productitemsPerPage = 10;
  productColumnMode = ColumnMode;
  productcolumns = [
    { prop: 'stockItem_Id', name: 'Stock Id' },
    { prop: 'quantity_Ordered', name: 'Quantity' }
  ];
 
  newClientForm = this.fb.group({

    client_First_Name         : ['', [Validators.required]],
    client_Last_Name          :  ['', [Validators.required]],
    client_Id_Number          :      ['', [Validators.required]],
    client_Business_Name      :   ['', [Validators.required]],
    client_Business_Reg_Number:       ['', [Validators.required]],
    client_Contact_Number     :   ['', [Validators.required]],
    client_Email              :   ['', [Validators.required]]
  });

  orderForm;

  constructor(private modalService: BsModalService, private fb: FormBuilder, private authService: AuthService, private router: Router) 
  {
    
    this.loadClientData(this.clientitemsPerPage, this.clientPage, this.searchclient, this.orderclientBy);
    this.loadProductData(this.productitemsPerPage, this.productPage, this.searchproduct, this.orderproductBy);
  
    this.orderForm = new FormGroup({
      order_Consultant_Id  : new FormControl(localStorage.getItem("emp_Id"),[Validators.required]),
      client_Name          : new FormControl('',[Validators.required]),
      client_Business_Name : new FormControl('',[Validators.required]),
      order_Client_Email   : new FormControl('',[Validators.required]),
      order_Client_Id      : new FormControl('',[Validators.required]),
      order_Deliver_By_Date: new FormControl('',[Validators.required]),
      order_client_location: new FormControl('',[Validators.required])
    })
    
    
  }

  createClient()
  {
    console.log('this.newClient : ', this.newClient); 
    console.log('this.newClientForm.value.client_First_Name : ', this.newClientForm.value.client_First_Name); 
    this.newClient.client_First_Name = this.newClientForm.value.client_First_Name;
    this.newClient.client_Last_Name = this.newClientForm.value.client_Last_Name;
    this.newClient.client_Id_Number = this.newClientForm.value.client_Id_Number;
    this.newClient.client_Business_Name = this.newClientForm.value.client_Business_Name;
    this.newClient.client_Contact_Number = this.newClientForm.value.client_Contact_Number;
    this.newClient.client_Email = this.newClientForm.value.client_Email;

    console.log(this.newClient);

    this.authService.createClient(this.newClient).subscribe(null,null,()=> {
      window.location.reload();
    });
  }

  onProductQuantity(Qty: Number)
  {
    console.log("product quantity: " + Qty);
    /*if (this.isProductQtyTrue(item)) {
      
    } else { 

      //logic of autoselect goes here
    
      
    }*/
  }

  isProductQtyTrue(p: IOrderItem) {
    return this.products.findIndex(d => d.stockItem_Id === p.stockItem_Id) > -1;
  }

  ngOnInit() {
    console.log(this.orderForm)
  }

  loadClientData(pageSize: number = 10, currentPage: number = 1, search: string = '', orderBy: string = '') {
    this.clientitemsPerPage = pageSize;
    this.clientPage = currentPage;
    this.searchclient = search;
    this.orderclientBy = orderBy;
    this.client = [];
    this.authService.viewClients().subscribe(data=> {
      console.log(data)
      this.clientdata = data

      for(let key in data)
      {
        if(data.hasOwnProperty(key))
        {
          this.client.push(data[key]);
          this.clientcount++;
          console.log(data[key])
          console.log(this.client[key].client_Id)
          console.log(key)
        }
      }
      
      this.clientrows = this.client.slice(0,this.client.length).map(({client_Id, client_First_Name, client_Last_Name, client_Business_Name}) => ({client_Id, client_First_Name, client_Last_Name, client_Business_Name}));  

      this.clienttemp = [...this.clientrows];
      console.log(this.clientrows)
      console.log(this.clientrows.client_First_Name)
      console.log(this.clienttemp)
      console.log(this.client)
      console.log('client count : ' + this.clientcount)
    },error => {
        this.isLoading = false;
      })
  }

  loadProductData(pageSize: number = 10, currentPage: number = 1, search: string = '', orderBy: string = '') {
    this.productitemsPerPage = pageSize;
    this.productPage = currentPage;
    this.searchproduct = search;
    this.orderproductBy = orderBy;

    this.products = [];
    
    this.authService.viewProducts().subscribe(data=> {
      console.log(data)
      this.productdata = data

      for(let key in data)
      {
        if(data.hasOwnProperty(key))
        {
          this.products.push(data[key]);
          this.productcount++;
          console.log(data[key])
        }
      }
      
     
      this.productrows = this.products.slice(0,this.products.length).map(({stockItem_Id, stockItem_Quantity, stockItem_Name}) => ({stockItem_Id, stockItem_Quantity, stockItem_Name}));
      

      this.producttemp = [...this.productrows];
      console.log(this.productrows)
      console.log(this.productrows.stockItem_Id)
      console.log(this.producttemp)
      console.log(this.products)
      console.log(this.productcount)
    })
    
  }


  onPage(event) {
  }

  toggleExpandRow(row) {
    this.table.rowDetail.toggleExpandRow(row);
  }

  onDetailToggle(event) {
  }

  changeClientDisplayMode(mode) {
    this.clientdisplayMode = mode;
  }
  
  changeProductDisplayMode(mode) {
    this.productdisplayMode = mode;
  }

  showClientAddNewModal() {
    this.show();
  }

  show() {
    this.modalRef = this.modalService.show(this.template, this.config);
  }


      isSelectedClient(c: iClient) {
        return this.client.findIndex(x => x.client_Id === c.client_Id) > -1;
        
      } 
  
  isSelectedProduct(p: IOrderItem) {
    return this.products.findIndex(d => d.stockItem_Id === p.stockItem_Id) > -1;
  }

  clientid: number;

  onSelectClient(item: iClient) {
    if (this.isSelectedClient(item)) {
      console.log(item.client_Business_Name);
      console.log(this.client.findIndex(d => d.client_Id === item.client_Id));
      this.clientid = item.client_Id;
      this.clientindex = this.client.findIndex(d => d.client_Id === item.client_Id)
      console.log('client index: ' + this.clientindex);
      this.selectedClient = this.client.filter(x => x.client_Id !== item.client_Id);
     
     
      this.orderForm.get('client_Name').patchValue(item.client_First_Name + ' ' + item.client_Last_Name);
      this.orderForm.get('client_Business_Name').patchValue(item.client_Business_Name);
      this.orderForm.get('order_Client_Email').patchValue(item.order_Client_Email);
      this.orderForm.get('order_Client_Id').patchValue(item.client_Id);
      
      
    } else {
      console.log(item.client_First_Name);
     
    }
    this.setClientSelectAllState();
  }

  pcount: number = 1;
  elementnumber: number;

  onSelectProduct(item: IOrderItem) {

    if (this.isSelectedProduct(item)) {
      console.log(item.stockItem_Name);
      console.log('product id ' + item.stockItem_Id);
      console.log('selected Products packed : ' + this.orderDetails.order_Items);
      
      console.log('products packed : ' + this.orderDetails.order_Items.length);
  
        this.orderDetails.order_Items.push({
          stockitem_Id: item.stockItem_Id,
          quantity_Ordered:+(document.getElementById('productQty' + this.products.findIndex(d => d.stockItem_Id === item.stockItem_Id)) as HTMLInputElement).value
        });
        this.pcount++;

     this.productindexcount++;
      console.log('products selected count : ' + this.productindexcount);
     

    } else { 

      //logic of autoselect goes here
    
      
    }
    this.setProductSelectAllState();
  }

  setClientSelectAllState() {
    if (this.selectedClient.length === this.client.length) {
      this.selectClientAllState = 'checked';
    } else if (this.client.length !== 0) {
      this.selectClientAllState = 'indeterminate';
    } else {
      this.selectClientAllState = '';
    }
  }

  setProductSelectAllState() {
    if (this.selectedProducts.length === this.products.length) {
      this.selectProductAllState = 'checked';
    } else if (this.products.length !== 0) {
      this.selectProductAllState = 'indeterminate';
    } else {
      this.selectProductAllState = '';
    }
  }

  selectClientAllChange($event) {
    if ($event.target.checked) {
    } else {
      this.selectedClient = [...this.client];
    }
    this.setClientSelectAllState();
  }

  selectProductAllChange($event) {
    if ($event.target.checked) {
    } else {
     this.selectedProducts = [...this.products];
    }
    this.setProductSelectAllState();
  }

  pageClientChanged(event: any): void {
   this.loadClientData(this.clientitemsPerPage, event.page, this.searchclient, this.orderclientBy);
  }

  pageProductChanged(event: any): void {
    this.loadProductData(this.productitemsPerPage, event.page, this.searchproduct, this.orderproductBy);
  }

  itemsClientPerPageChange(perPage: number) {
    this.loadClientData(perPage, 1, this.searchclient, this.orderclientBy);
  }

  itemsProductPerPageChange(perPage: number) {
    this.loadProductData(perPage, 1, this.searchproduct, this.orderproductBy);
  }

  changeClientOrderBy(item: any) {
    this.loadClientData(this.clientitemsPerPage, 1, this.searchclient, item.value);
  }

  changeProductOrderBy(item: any) {
    this.loadProductData(this.productitemsPerPage, 1, this.searchproduct, item.value);
  }


  searchClientKeyUp(event){
    const val = event.target.value.toLowerCase().trim();
    this.loadClientData(this.clientitemsPerPage, 1, val, this.orderclientBy);
  }

  searchProductKeyUp(event){
    const val = event.target.value.toLowerCase().trim();
    this.loadProductData(this.productitemsPerPage, 1, val, this.orderproductBy);
  }


  onClientContextMenuClick(action: string, item: iClient) {
    console.log('onClientContextMenuClick -> action :  ', action, ', item.client_First_Name :', item.client_First_Name);
  }

  onProductContextMenuClick(action: string, item: IOrderItem) {
    console.log('onProductContextMenuClick -> action :  ', action, ', item.stockItem_Id :', item.stockItem_Id);
  }

  addTagFn(addedName) {
    return { name: addedName, tag: true };
  }

  
  createOrder()
  {
 
    console.log('this.orderLocation : ', this.orderLocation); 
    this.orderDetails['location'] = this.orderLocation;
    this.orderDetails['order_Consultant_Id'] = +localStorage.getItem("emp_Id");
    this.orderDetails['order_Client_Id'] = this.clientid;
    this.orderDetails['order_Date_Placed'] = moment().format();
    this.orderDetails['order_Deliver_By_Date'] = this.orderForm.value.order_Deliver_By_Date; 

    console.log(this.orderDetails);
    console.log('date placed ',moment(new Date(),'YYYY-MM-DDTHH:mm'));

    this.authService.logOrder(this.orderDetails).subscribe(null,null,()=> {
      window.location.reload();
    });
  }

  //google
  
  onAutocompleteSelected(result: PlaceResult) {
    console.log('onAutocompleteSelected: ', result.address_components);
    console.log('onAutocompleteSelected: ', result.address_components[0].types[0]);
    console.log('onAutocompleteSelected: ', result.address_components[0].long_name);
    console.log('onAutocompleteSelected: ', result.address_components[1].types[0]);
    console.log('onAutocompleteSelected: ', result.address_components[1].long_name);
    console.log('onAutocompleteSelected: ', result.address_components[2].types[0]);
    console.log('onAutocompleteSelected: ', result.address_components[2].long_name);
    console.log('onAutocompleteSelected: ', result.address_components[3].types[0]);
    console.log('onAutocompleteSelected: ', result.address_components[3].long_name);
    console.log('onAutocompleteSelected: ', result.address_components[4].types[0]);
    console.log('onAutocompleteSelected: ', result.address_components[4].long_name);
    console.log('onAutocompleteSelected: ', result.address_components[5].types[0]);
    console.log('onAutocompleteSelected: ', result.address_components[5].long_name);
    console.log('onAutocompleteSelected: ', result.address_components[6].types[0]);
    console.log('onAutocompleteSelected: ', result.address_components[6].long_name);
    console.log('onAutocompleteSelected: ', result.address_components[7].types[0]);
    console.log('onAutocompleteSelected: ', result.address_components[7].long_name);
    
    this.orderLocation['location_Street'] = result.address_components[0].long_name + ' ' + result.address_components[1].long_name;
    console.log('this.orderLocation.location_Street : ', this.orderLocation.location_Street); 

    this.orderLocation['location_Suburb'] = result.address_components[2].long_name;
    console.log('this.orderLocation.location_Suburb : ', this.orderLocation.location_Suburb); 

    this.orderLocation['location_City'] = result.address_components[4].long_name;
    console.log('this.orderLocation.location_City : ', this.orderLocation.location_City); 

    this.orderLocation['location_Zip_Code'] = result.address_components[7].long_name;
    console.log('this.orderLocation.location_Zip_Code : ', this.orderLocation.location_Zip_Code); 

    this.orderLocation['location_Places_Id'] = result.place_id;
    console.log('this.orderLocation.location_Places_Id : ', this.orderLocation.location_Places_Id); 

  }
 
  onLocationSelected(location: Location) {
    console.log('onLocationSelected: ', location);
    this.latitude = location.latitude;
    this.longitude = location.longitude;
    
    this.orderLocation['location_Latitude'] = location.latitude;
    console.log('this.orderLocation.location_Latitude : ', this.orderLocation.location_Latitude); 
    
    this.orderLocation['location_Longitude'] = location.longitude;
    console.log('this.orderLocation.location.longitude : ', this.orderLocation.location_Longitude); 
    console.log('this.orderLocation : ', this.orderLocation); 
    
  }


 
 
  get myForm() {
    console.log(this.orderForm)
    return this.orderForm.controls;
  }


}
 

