import { Component, OnInit } from '@angular/core';
import { AuthService } from 'src/app/shared/auth.service';

export interface IBranch {
  branch_Id:       number;
  branch_Name:     string;
  branch_Location: BranchLocation;
}

export interface BranchLocation {
  location_Street:    string;
  location_Suburb:    string;
  location_City:      string;
  location_Zip_Code:  string;
  location_Longitude: number;
  location_Latitude:  number;
  location_Places_Id: string;
}



// Generated by https://quicktype.io

export interface IRoutes {
  route_Id:        number;
  route_ETA:       string;
  route_Driver_Id: number;
  route_Completed: string;
  orders:          Order[];
}

export interface Order {
  order_Id:              number;
  order_Sequence_Number: number;
  order_Delivered:       boolean;
  location:              Location;
}

export interface Location {
  location_Street:    string;
  location_Suburb:    string;
  location_City:      string;
  location_Zip_Code:  string;
  location_Longitude: number;
  location_Latitude:  number;
  location_Places_Id: string;
}

export interface Marker
{
	lat: number,
	lng: number,
	alpha: number
}

@Component({
  selector: 'app-maps',
  templateUrl: './maps.component.html'
})


export class MapsComponent implements OnInit {
  orderIcons = {
    url: 'iconsminds-three-arrow-fork',
 scaledSize: {
        width: 40,
        height: 60
    }
};

  public manOrders : IRoutes[] =[];

  public manOrderData : IRoutes ;
  public manOrderCount : number = 0 ;
  public conOrders : IRoutes ;

  branch : IBranch[] = [];
  branchcount: number = 0;

  markers : Marker[]= [];

  selectedMarker;

  constructor(private authService: AuthService) 
  { 
    
    this.authService.getBranch().subscribe(data=> {
      
      this.branch.push({
        branch_Id: data.branch_Id,
        branch_Name: data.branch_Name,
        branch_Location: {
          location_City: data.branch_Location.location_City,
          location_Street: data.branch_Location.location_Street,
          location_Suburb: data.branch_Location.location_Suburb,
          location_Zip_Code: data.branch_Location.location_Zip_Code,
          location_Longitude: data.branch_Location.location_Longitude,
          location_Latitude: data.branch_Location.location_Latitude,
          location_Places_Id: data.branch_Location.location_Places_Id
        }
      });
      
      console.log('branch details: ',this.branch)
    });
    
    this.authService.ManagerRoutes().subscribe(data=> {
      console.log(data)
      this.manOrderData = data;
        for(let key in data)
        {
          if(data.hasOwnProperty(key))
          {
            this.manOrders.push(data[key]);
            this.manOrderCount++;
          }
        }
        
      
    });
    
    console.log(this.manOrders)
    console.log('manOrders details: ',this.manOrders)
    console.log('manOrders manOrderCount: ',this.manOrderCount)

    let iroutescount, iorderscount = 0;

    for(let iroutes = 0; iroutes <= this.manOrders.length; iroutes++)
    {
      for(let iorders = 0; iorders <= this.manOrders[iroutes].orders.length; iorders++)
      {
        this.markers.push(
          {
            lat: 1,
            lng: 1,
            alpha:1
          }
        );
        console.log('marker count: ',iorderscount)
        this.quickcount++;
       /* this.addMarker(this.manOrders[iroutes].orders[iorders].location.location_Latitude,this.manOrders[iroutes].orders[iorders].location.location_Longitude);
      */
        iorderscount++
      }
      iroutescount++
      console.log('marker count: ',iroutescount)
    }
    console.log('marker details: ',this.markers)
    console.log('marker count: ',this.quickcount)
    console.log('route object: ',this.manOrders[iroutescount].orders[iorderscount].location.location_Latitude)
   

  }

  mapClicked($event: MouseEvent) {

  }

  addMarker(lat: number, lng: number) {
    
  }

  selectMarker(event) {
    this.selectedMarker = {
      lat: event.latitude,
      lng: event.longitude
    };
  }

  max(coordType: 'lat' | 'lng'): number {
    return Math.max(...this.markers.map(marker => marker[coordType]));
  }

  min(coordType: 'lat' | 'lng'): number {
    return Math.min(...this.markers.map(marker => marker[coordType]));
  }


  ngOnInit() 
  {
    
  }

  map: google.maps.Map;

  quickcount = 0;

  initMap(): void {
    
   /* this.map = new google.maps.Map(document.getElementById("map") as HTMLElement, {
    center: { lat: this.branch[this.branchcount].branch_Location.location_Latitude, lng: this.branch[this.branchcount].branch_Location.location_Longitude },
    zoom: 20
  });*/
  
}

}

